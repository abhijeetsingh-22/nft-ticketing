generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                  String    @id @default(cuid())
  name                String
  slug                String    @unique
  description         String
  startDate           DateTime
  entryDate           DateTime?
  endDate             DateTime
  state               String?
  liveStatus          Boolean?
  publicVisibility    Boolean?
  endedStatus         Boolean?
  coverPhoto          String
  thumbnail           String
  organizerId         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  numberOfTickets     Int
  ticketPrice         Float
  nftSymbol           String?
  numberOfTicketsSold Int       @default(0)
  venueName           String
  venueAddress        String
  zipCode             String
  organizer           User      @relation(fields: [organizerId], references: [id])
  tickets             Ticket[]
  Order               Order[]

  @@map("events")
}

model Ticket {
  id        String       @id @default(cuid())
  tokenId   String       @unique
  ownerId   String
  eventId   String
  price     Float
  status    TicketStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime
  userId    String?
  event     Event        @relation(fields: [eventId], references: [id])
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order     Order[]

  @@map("tickets")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  email         String    @unique
  walletAddress String?   @unique
  publicEmail   Boolean?
  salt          String?
  password      String?
  emailVerified DateTime?
  image         String?
  isOnboarded   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  currency      String?
  events        Event[]
  tickets       Ticket[]
  orders        Order[]
  socialLink    SocialLink?

  @@map("users")
}

model SocialLink {
  id           String   @id @default(cuid())
  instagramUrl String?
  twitterUrl   String?
  githubUrl    String?
  discordUrl   String?
  userId       String   @unique // Ensuring one-to-one relationship
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("social_links")
}

model Order {
  id String @id @default(cuid())

  customer User        @relation(fields: [userId], references: [id])
  event    Event       @relation(fields: [eventId], references: [id])
  ticket   Ticket      @relation(fields: [ticketId], references: [id])
  price    Float
  status   OrderStatus

  ticketId String
  eventId  String
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  AVAILABLE
  SOLD
  TRANSFERRED
  REDEEMED
}
