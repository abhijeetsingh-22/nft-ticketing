generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                  String    @id @default(cuid())
  name                String
  slug                String    @unique
  description         String
  startDate           DateTime
  entryDate           DateTime?
  endDate             DateTime
  state               String?
  liveStatus          Boolean?
  publicVisibility    Boolean?
  endedStatus         Boolean?
  coverPhoto          String
  thumbnail           String
  organizerId         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  numberOfTickets     Int
  ticketPrice         Float
  nftSymbol           String?
  numberOfTicketsSold Int       @default(0)
  venueName           String
  venueAddress        String
  zipCode             String
  organizer           User      @relation(fields: [organizerId], references: [id])
  tickets             Ticket[]
  orders              Order[]

  @@map("events")
}

model Ticket {
  id        String   @id @default(cuid())
  tokenId   String   @unique
  eventId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  maxUses   Int      @default(1)
  uses      Int      @default(0)

  @@map("tickets")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  email         String    @unique
  walletAddress String?   @unique
  publicEmail   Boolean?
  salt          String?
  password      String?
  emailVerified DateTime?
  image         String?
  isOnboarded   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  currency      String?
  events        Event[]
  tickets       Ticket[]
  orders        Order[]
  socialLink    SocialLink?
  accounts      Account[]
  @@map("users")
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}
model SocialLink {
  id           String   @id @default(cuid())
  instagramUrl String?
  twitterUrl   String?
  githubUrl    String?
  discordUrl   String?
  userId       String   @unique // Ensuring one-to-one relationship
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("social_links")
}

model Order {
  id String @id @default(cuid())

  customer User        @relation(fields: [userId], references: [id])
  event    Event       @relation(fields: [eventId], references: [id])
  ticket   Ticket?
  status   OrderStatus

  eventId String
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}
model EntryCode{
  id String @id @default(cuid())
  code String
  walletAddress String
  nftAddress String
  eventId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("entry_codes")
}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
