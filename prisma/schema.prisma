generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id               String   @id @default(cuid())
  name             String
  slug             String
  description      String
  startDate        DateTime
  entryDate        DateTime
  endDate          DateTime
  venueName        String
  state            String?
  liveStatus       Boolean?
  publicVisibility Boolean?
  endedStatus      Boolean?
  attendees        User[]
  coverPhoto       String
  thumbnail        String
  organizerId      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tickets          Ticket[]

  @@map("events")
}

model Ticket {
  id        String       @id @default(cuid())
  tokenId   String       @unique
  ownerId   String
  eventId   String
  price     Float
  status    TicketStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime
  userId    String?
  event     Event        @relation(fields: [eventId], references: [id])
  user      User?        @relation(fields: [userId], references: [id])

  @@map("tickets")
}

enum TicketStatus {
  AVAILABLE
  SOLD
  TRANSFERRED
  REDEEMED
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String  @unique
  walletAddress String? @unique
  salt          String?
  password      String?

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
